Xdebug Update: June 2021
========================

.. articleMetaData::
   :Where: London, UK
   :Date: 2021-07-06 09:01 Europe/London
   :Tags: blog, php, xdebug
   :Short: xdebug-21jun

In this monthly update I explain what happened with Xdebug development
in this past month. These will be published on the first Tuesday after the 5th
of each month.

`Patreon <https://www.patreon.com/derickr>`_ and `GitHub
<https://github.com/sponsors/derickr/>`_ supporters will get it earlier,
around the first of each month.

You can `become a patron <https://www.patreon.com/bePatron?u=7864328>`_ or
support me through `GitHub Sponsors <https://github.com/sponsors/derickr>`_.
I am currently 55% towards my $2,000 per month goal.
If you are leading a team or company, then it is also possible to support
Xdebug through `a subscription <https://xdebug.org/support>`_.

In June, I worked on Xdebug for about 48 hours, with funding being
around 24 hours, which is only **half**.

PHP 8.1 Support
---------------

PHP 8.1 recently acquired a new `Enum
<https://wiki.php.net/rfc/enumerations>`_ type, and I added support for that
in Xdebug's myriad of modes, such as tracing, profiling, and debugging.

Enumerations are implemented as a special case of classes, and the step
debugger was already be able to communicate these new enums. However, their
name and value are displayed as normal class properties, which is less than
ideal. The debugging protocol already has facilities for communicating
additional information with data, which is what Xdebug now does. IDEs will
need to make use of this additional information though.

I also had to make some more tweaks with regard to PHP 8.1's Fibers.
Although PHP 8.1 feature freeze is coming up soon, I suspect that I will need
to make more tweaks.

Xdebug 3.1
----------

I have continued to work on the issues that were raised by 
the developer of the `PHP Debug Adapter for Visual Studio
Code <https://github.com/xdebug/vscode-php-debug>`_. The main new addition is
the `xdebug_notify()` function that you can use to send variables to the IDE.
The IDE can then choose to display this information in a structured way.

I have not yet worked on the  `UNC paths
<https://bugs.xdebug.org/1964>`_ issue. In order to reproduce it, I need to be
able to run Windows' WSL2, which I can't do in my virtualised Windows, and I
don't have (or want!) extra hardware to run Windows natively.

Xdebug Cloud
------------

To make `Xdebug Cloud <https://xdebug.cloud>`_ applicable in more situations,
I recently added the support of being to set your Cloud ID (User Key) through
the browser extensions as the value of the *Debug Session Name*.

I have now improved Xdebug's Shared Secret for triggers, which compares the
value that comes in through the browser extensions, with a value as configured
in the php.ini file. Only if it matches, would the debugger initiate a
connection. The new functionality allows you to specify multiple values,
separated by a ``,`` as value for ``xdebug.trigger_value`` so that you can control
which *multiple* Cloud IDs can initiate a debugging connection. This adds
additional protection so that other Xdebug Cloud users with a valid ID can't
use the browser extensions against third party web sites to initiate a debug
session.

Xdebug Cloud is the *Proxy As A Service* platform to allow for debugging in
more scenarios, where it is hard, or impossible, to have Xdebug make a
connection to the IDE. It is continuing to operate as Beta release.

Packages start at Â£49/month, and revenue will be used to further the
development of Xdebug.

If you want to be kept up to date with Xdebug Cloud, please sign up to the
`mailinglist <https://xdebug.cloud/newsletter>`_, which I will use to send out
an update not more than once a month.

Xdebug Videos
-------------

I have published two more videos on how to use Xdebug on my `YouTube channel
<https://www.youtube.com/playlist?list=PLg9Kjjye-m1g_eXpdaifUqLqALLqZqKd4>`_.

These are:

- `Xdebug 3: Code Coverage for Websites
  <https://www.youtube.com/watch?v=T9rwW-uySBE>`_, where I show how to make a
  code coverage report from multiple requests to your application
- `Xdebug 3: Debugging Symfony Console Commands
  <https://www.youtube.com/watch?v=lfS0S29t-xg>`_, where I set up Xdebug to
  debug command line tools using Symfony Console commands as an example. I
  also show how to use Exception Breakpoints.

If you would like to see a 5 to 10 minute long video on another specific
topic, feel free to request them through this `Google Form <https://www.youtube.com/watch?v=lfS0S29t-xg>`_.

Business Supporter Scheme and Funding
-------------------------------------

In June, no new supporters signed up.

If you, or your company, would also like to support Xdebug, head over to the
`support <https://xdebug.org/support>`_ page!

Besides business support, I also maintain a `Patreon
<https://www.patreon.com/derickr>`_ page and a profile on `GitHub sponsors
<https://github.com/sponsors/derickr>`_.
